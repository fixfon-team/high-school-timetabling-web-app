generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Class {
    id        String    @id @default(cuid())
    classDay  Day
    classHour ClassHour
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    ClassRoom   ClassRoom @relation(fields: [classRoomId], references: [id], onDelete: Cascade)
    classRoomId String

    Teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    teacherId String

    Subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    subjectId String

    Term   Term   @relation(fields: [termId], references: [id], onDelete: Cascade)
    termId String

    @@unique([classRoomId, teacherId, subjectId])
}

model ClassRoom {
    id         String     @id @default(cuid())
    name       String
    classLevel ClassLevel
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    Class      Class[]

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    Teacher           Teacher? @relation(fields: [assignedTeacherId], references: [id], onDelete: Cascade)
    assignedTeacherId String?
}

model SubjectPreference {
    id        String      @id @default(cuid())
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    classDay  Day
    classHour ClassHour[]

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    Subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    subjectId String

    @@unique([classDay, subjectId, organizationId])
}

model Subject {
    id                String              @id @default(cuid())
    code              String
    name              String
    description       String?
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    SubjectPreference SubjectPreference[]
    Class             Class[]

    Teacher   Teacher? @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    teacherId String?

    Term   Term   @relation(fields: [termId], references: [id], onDelete: Cascade)
    termId String

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
}

// * e.g. Teacherid:1 from orgId:1 can work on Monday(C1,C2,C3,C7,C8) AND Tuesday(C1,C2,C3) AND Wednesday(all) so
// * There will be three records in TeacherWorkPreferance for teacherId:1 from orgId:1
// * @@unique([workingDay, teacherId, organizationId]) ensures that.
model TeacherWorkPreferance {
    id          String      @id @default(cuid())
    workingDay  Day
    workingHour ClassHour[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    Teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    teacherId String

    @@unique([workingDay, teacherId, organizationId])
}

model Teacher {
    id                    String                  @id @default(cuid())
    fullName              String
    description           String?
    department            String?
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt
    TeacherWorkPreferance TeacherWorkPreferance[]
    ClassRoom             ClassRoom[]
    Class                 Class[]
    Subject               Subject[]

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String

    User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @unique // * This is nullable because a teacher can be added by admin without a user account
}

model Term {
    id          String    @id @default(cuid())
    name        String
    description String?
    start       DateTime
    end         DateTime
    Class       Class[]
    subjects    Subject[]

    Organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
}

model Organization {
    id                    String                  @id @default(cuid())
    name                  String
    description           String?
    contact               String?                 @db.Text
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt
    users                 User[]
    terms                 Term[]
    teachers              Teacher[]
    Subject               Subject[]
    TeacherWorkPreferance TeacherWorkPreferance[]
    SubjectPreference     SubjectPreference[]
    ClassRoom             ClassRoom[]
    Class                 Class[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id         String      @id @default(cuid())
    username   String?     @unique
    email      String?     @unique
    image      String?
    accounts   Account[]
    sessions   Session[]
    globalRole GlobalRole
    memberRole MemberRole?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    Organization   Organization? @relation(fields: [organizationId], references: [id])
    organizationId String?
    Teacher        Teacher?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum ClassLevel {
    L9
    L10
    L11
    L12
}

enum Day {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}

enum ClassHour {
    C1
    C2
    C3
    C4
    C5
    C6
    C7
    C8
}

enum GlobalRole {
    SUPERADMIN
    ORGMEMBER
}

enum MemberRole {
    ADMIN
    TEACHER
}
